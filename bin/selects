#!/usr/bin/env ruby

HELP = <<EOS
SQL like linux searcher

$ selects size, basename from "./*" where extname == ".zsh" order by size
size	basename
213	cent.zsh
1018	mac.zsh
1319	ubuntu.zsh
2999	common.zsh
EOS

# add id() to Object
class Object
  def id()
    self
  end
end

# change value for fit with key
def v_for_k(k, o, v)
  # value should be to_f when compare with `size`
  return v.to_f if k == "size"
  # value should be regexp when using match
  return Regexp.new(v) if o == "=~"
  # if c/m/atime, convert key to method
  return eval(v) if ["ctime", "mtime", "atime"].include?(k)
  return v
end

def parse(args)
  q = {}
  buf = []
  while args.size > 0
    # peek of args
    token = args.shift.sub(/,$/, "") # remove last comma like "size,"

    case token
    when "from"
      # current buf is colname for select
      q[:col] = buf
      buf = []

      # next of from is filename
      from = args.shift
      q[:from] = from
    when "where"
      q[:where] = []
      loop {
        # key == value
        key   = args.shift
        op    = args.shift
        value = args.shift

        value = v_for_k(key, op, value)
        where = {
          key:   key,
          op:    op,
          value: value,
          with: "id", # for method chain
        }
        q[:where].push(where)

        if args.size > 0 && ["and", "or"].include?(args[0].downcase)
          with = args.shift.downcase == "and" ? "&": "|"
          q[:where].last[:with] = with
          next
        end
        break
      }
    when "order"
      by = args.shift
      exit(1) if by != "by"
    else
      # adding to the buf
      buf.push(token)
    end
  end

  if buf.size > 0
    q[:sort] = buf
  end

  return q
end

def exec(q)
  where = Proc.new {|file|
    next true unless q.has_key?(:where)

    # build  method chain from q
    conditions = q[:where].map{|w|
      f = File
        .method(w[:key])
        .call(file)
        .method(w[:op])
        .call(w[:value])

      if w[:op] == "=~"
        f = f.nil? ? false: true
      end

      f.method(w[:with])
    }

    if conditions.size == 1
      next conditions.shift.call()
    end

    conditions = conditions.reverse.reduce{|pre, curr|
      if pre.class == Method && pre.name == :id
        pre = pre.call()
      end
      curr.call(pre)
    }

    next conditions
  }

  # get file props as coloum
  select = Proc.new {|file|
    row = {}
    for col in q[:col]
      row[col] = File.method(col).call(file)
    end
    row
  }

  # sorting result
  sort = Proc.new{|file| true}
  if q.has_key?(:sort)
    sort = Proc.new{|row|
      q[:sort].map{|col|
        row[col]
      }
    }
  end

  output = Proc.new {|row|
    puts row.values.join("\t")
  }

  result = Dir
    .method("glob")
    .call(q[:from]) # grab files
    .select(&where) # reduce it
    .map(&select)   # get prop of each file
    .sort_by(&sort) # sorting it

  result.each(&output)
end

if ARGV.size == 0
  puts HELP
  exit 0
end

query = parse(ARGV)
exec(query)
