#!/usr/bin/env ruby

HELP=<<-EOS
$ gobrew install 1.2
$ gobrew use 1.2
$ gobrew version
$ gobrew list
$ gobrew here
$ gobrew path
$ gobrew -h
EOS

arg = ARGV[0]
PATH="#{ENV['DOTFILES']}/bin/.gobrew/go"
URL="https://storage.googleapis.com/golang"
ARCH = `uname` == "Darwin\n" ? "darwin-amd64" : "linux-amd64"

if arg == nil || arg == "-h"
  puts `gobrew version && gobrew path`
  puts HELP
end

if arg == "here"
  current = Dir::pwd

template = <<EOS
export GOPATH=#{current}
export PATH=$GOPATH/bin:$PATH
EOS
  path = "#{ENV['DOTFILES']}/bin/.gobrew/env/.gopath"
  env = File.open(path,'w')
  env.puts template
  env.close
end

if arg == "path"
  print "$GOPATH: "
  puts `echo $GOPATH`
end

if arg == "list"
  puts `\ls #{PATH} | grep go | sed "s/go//"`
end

if arg == "use"
  version = ARGV[1]
  puts "use go"+version
  `rm -f #{PATH}/current`
  `ln -s #{PATH}/go#{version} #{PATH}/current`
end

if arg == "install"
  version = "go#{ARGV[1]}"
  file = "#{version}.#{ARCH}.tar.gz"
  url = "#{URL}/#{file}"
  puts "downloading #{url}"
  if `which curl`
    `curl #{url} -o /tmp/#{file}`
  else
    `wget #{url} -P /tmp`
  end
  `tar zxvf /tmp/#{file} -C /tmp`
  `mv /tmp/go #{PATH}/#{version}`
end

if arg == "version"
  info = `file #{PATH}/current`
  print "version: "
  puts info.split('/').last.sub("'", "")
end

if arg == "tools"
  # and go-vim :GoINstallBinaries
  puts "go get github.com/maruel/panicparse/cmd/pp"
  `go get github.com/maruel/panicparse/cmd/pp`
  puts "go get golang.org/x/tools/cmd/bundle"
  `go get golang.org/x/tools/cmd/bundle`
end
