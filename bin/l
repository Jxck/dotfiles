#!/usr/bin/env ruby

## Jxck own ls alternatives

require 'etc'

class Node
  attr_reader :name, :stat
  def initialize(entry, all)
    @name = entry
    @stat = File.lstat(entry)
    @all = all
  end

  def uid
    Etc.getpwuid(@stat.uid).name
  end

  def gid
    Etc.getgrgid(@stat.gid).name
  end

  def dir?
    @stat.directory?
  end

  def file?
    @stat.file?
  end

  def exec?
    @stat.executable_real?
  end

  def sym?
    @stat.symlink?
  end

  def mode
    mode = @stat.mode

    str = ""

    # user
    str << ((mode & Integer("0b100000000") > 0) ? "r" : "-")
    str << ((mode & Integer("0b010000000") > 0) ? "w" : "-")
    str << ((mode & Integer("0b001000000") > 0) ? "x" : "-")

    # group
    str << ((mode & Integer("0b000100000") > 0) ? "r" : "-")
    str << ((mode & Integer("0b000010000") > 0) ? "w" : "-")
    str << ((mode & Integer("0b000001000") > 0) ? "x" : "-")

    # other
    str << ((mode & Integer("0b000000100") > 0) ? "r" : "-")
    str << ((mode & Integer("0b000000010") > 0) ? "w" : "-")
    str << ((mode & Integer("0b000000001") > 0) ? "x" : "-")

    str
  end

  def size
    size = @stat.size
    if size > 1024*1024
      size = size.quo(1024*1024).round(1).to_f.to_s + "M"
    elsif size > 1024
      size = size.quo(1024).round(1).to_f.to_s + "K"
    else
      size = size.to_s + "B"
    end
    size.rjust(6)
  end

  def mtime
    @stat.mtime.strftime("%Y-%m-%d %H:%M")
  end

  def to_s
    name = File.basename(@name)
    if dir?
      name = "[0;34m#{name}[0m"
    elsif sym?
      path = File.readlink(@name)
      name =  "[0;36m#{name}[0m -> #{path}"
    elsif exec?
      name =  "[0;31m#{name}[0m"
    end

    if !@all
      return name.to_s
    end

    [
      mode,
      uid,
      gid,
      size,
      mtime,
      name
    ].join(" ")
  end

  def level
    return 1 if dir?
    return 2 if sym?
    return 3 if exec?
    return 4 if file?
  end

  def <=>(target)
    if level == target.level
      return name <=> target.name
    end

    level <=> target.level
  end
end

require "pathname"

i = ARGV.index("-a")
target, all = nil, nil

if i == nil
  all = false
  target = ARGV.shift || "."
else
  all = true
  ARGV.delete_at(i)
  target = ARGV.shift || "."
end

path = Pathname.new(target)

result = Dir.entries(target).reject {|entry|
  entry == "." || entry == ".."
}.map {|entry|
  Node.new(path.join(entry), all)
}.sort

puts result
