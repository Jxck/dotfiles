#!/usr/bin/env ruby

HELP=<<EOS
coloring every kind of file roughly

\\x1b[0;30m
str
\\x1b[0m

\x1b[0;30m BLACK  \x1b[0m = "0;30"
\x1b[0;31m RED    \x1b[0m = "0;31"
\x1b[0;32m GREEN  \x1b[0m = "0;32"
\x1b[0;33m BROWN  \x1b[0m = "0;33"
\x1b[0;34m NAVY   \x1b[0m = "0;34"
\x1b[0;35m PURPLE \x1b[0m = "0;35"
\x1b[0;36m CYAN   \x1b[0m = "0;36"
\x1b[0;37m GRAY   \x1b[0m = "0;37"
\x1b[1;30m DIM    \x1b[0m = "1;30"
\x1b[1;31m ORANGE \x1b[0m = "1;31"
\x1b[1;32m LIME   \x1b[0m = "1;32"
\x1b[1;33m YELLOW \x1b[0m = "1;33"
\x1b[1;34m BLUE   \x1b[0m = "1;34"
\x1b[1;35m PINK   \x1b[0m = "1;35"
\x1b[1;36m AQUA   \x1b[0m = "1;36"
\x1b[1;37m WHITE  \x1b[0m = "1;37"

$ cat access.log | color          # all
$ cat access.log | color keyword  # only keyword
EOS

BLACK  = "0;30"
RED    = "0;31"
GREEN  = "0;32"
BROWN  = "0;33"
NAVY   = "0;34"
PURPLE = "0;35"
CYAN   = "0;36"
GRAY   = "0;37"
DIM    = "1;30"
ORANGE = "1;31"
LIME   = "1;32"
YELLOW = "1;33"
BLUE   = "1;34"
PINK   = "1;35"
AQUA   = "1;36"
WHITE  = "1;37"

@LineColor = [
  ORANGE,   CYAN,
  LIME,     PURPLE,
  YELLOW,   NAVY,
  PINK,     GREEN,
  BLUE,     BROWN,
  AQUA,     RED,
  WHITE,    GRAY,
  DIM,      BLACK,
]

@WordColor = [
  ORANGE,
  LIME,
  YELLOW,
  PINK,
  BLUE,
  AQUA,
  DIM,
]

def color(src, color)
  head = "\x1b[#{color}m"
  tail = "\x1b[0m"
  "#{head}#{src}#{tail}"
end

def color_line(line)
  splitted = []
  token = ""
  state = ""
  line.chars {|c|
    token << c
    case c
    when '"'
      if state == ""
        state = '"'
      elsif state == '"'
        splitted << token
        token = ""
        state = ""
      end
    when "[", "("
      if state == '"'
        next
      end
      state = c
    when "]", ")"
      if state == '"'
        next
      end
      splitted << token
      token = ""
      state = ""
    when " "
      if ["[", "(", '"'].include?(state)
        next
      end

      splitted << token
      token = ""
    end
  }

  splitted << token

  splitted
    .zip(@LineColor)
    .map{|x| color(x[0], x[1])}
    .join('')
end

if ARGV[0] == "-h" || STDIN.isatty
  puts HELP
  exit 0
end

args = ARGV
while line = STDIN.gets
  if args.size > 0
    args.zip(@WordColor).map{|arg|
      word = arg[0]
      code = arg[1]
      reg = Regexp.compile(word, Regexp::IGNORECASE)
      line = line.gsub(reg) {|match|
        color(match, code)
      }
    }
    STDOUT.print line
  else
    STDOUT.print color_line(line)
  end
end
